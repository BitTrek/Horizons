{%- doc -%}
  Renders the product's main image that updates when variants change.

  @param {string} [loading] - The html loading attribute
{%- enddoc -%}

{% assign current_variant = closest.product.selected_or_first_available_variant %}
{% assign main_image = current_variant.featured_image | default: closest.product.featured_image %}
{% assign alt = closest.product.title %}

{% liquid
  assign width = '100%'
  assign media_width_desktop = '100vw'
  assign media_width_mobile = '100vw'
  assign sizes = 'auto, (min-width: 750px) ' | append: media_width_desktop | append: ', ' | append: media_width_mobile
  assign widths = '450, 750, 1200, 1800, 2000'
%}

<!-- Load Fabric.js -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.3.0/fabric.min.js"></script>

<div 
  class="product-main-image-block"
  data-product-main-image
  data-product-id="{{ closest.product.id }}"
  {{ block.shopify_attributes }}
>
  {% if main_image %}
    <div class="product-main-image-container">
      <canvas id="product-canvas-{{ block.id }}" class="product-main-canvas"></canvas>
      <img
        src="{{ main_image | image_url: width: 2000 }}"
        alt="{{ alt }}"
        loading="{{ loading | default: 'lazy' }}"
        width="{{ width }}"
        sizes="{{ sizes }}"
        class="product-main-image"
        data-variant-image
        data-variant-id="{{ current_variant.id }}"
        style="display: none;"
      >
      
      <!-- Upload Button -->
      <div class="upload-design-button" id="upload-design-button-{{ block.id }}">
        <div class="upload-design-circle">
          <div class="upload-design-icon">ðŸŽ¨âœ¨</div>
          <div class="upload-design-text">Add your design here <span class="upload-design-number">32</span></div>
        </div>
      </div>
      
      <!-- Hidden File Input -->
      <input 
        type="file" 
        id="design-upload-input-{{ block.id }}" 
        accept="image/*" 
        style="display: none;"
        class="design-upload-input"
      >
    </div>
  {% else %}
    <div class="product-main-image-container product-main-image--placeholder">
      <div class="product-main-image-placeholder">
        <span>No image available</span>
      </div>
    </div>
  {% endif %}
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const productMainImage = document.querySelector('[data-product-main-image]');
  if (!productMainImage) return;

  const imageElement = productMainImage.querySelector('[data-variant-image]');
  const canvasElement = productMainImage.querySelector('.product-main-canvas');
  if (!imageElement || !canvasElement) return;

  let fabricCanvas = null;
  let euroHoodieLogo = null;
  let uploadedDesign = null;
  let isMobile = window.innerWidth < 750;

  // Debounce for thumbnail regeneration
  function debounce(fn, wait) {
      let t;
      return function(...args) {
          clearTimeout(t);
          t = setTimeout(() => fn.apply(null, args), wait);
      };
  }

  // Debounced thumbnail generator
  const generateThumbnailDebounced = debounce(() => generateThumbnail(), 200);

  // Get responsive canvas dimensions
  function getCanvasDimensions() {
    const container = productMainImage.querySelector('.product-main-image-container');
    const containerWidth = container.offsetWidth;
    
    // Mobile: use container width, Desktop: max 600px
    const canvasWidth = isMobile ? containerWidth : Math.min(600, containerWidth);
    const canvasHeight = canvasWidth; // Square aspect ratio
    
    return { width: canvasWidth, height: canvasHeight };
  }

  // Initialize Fabric.js canvas
  function initFabricCanvas() {
    if (fabricCanvas) {
      fabricCanvas.dispose();
    }

    const dimensions = getCanvasDimensions();
    
    fabricCanvas = new fabric.Canvas(canvasElement, {
      width: dimensions.width,
      height: dimensions.height,
      backgroundColor: 'transparent',
      preserveObjectStacking: true,
      enableRetinaScaling: true,
      selection: false
    });

    // Set canvas background to transparent
    fabricCanvas.setBackgroundColor('transparent', function() {
      fabricCanvas.renderAll();
    });

    // Set initial product image as background
    function setInitialBackground() {
      const initialImageUrl = imageElement.src;
      console.log('Initial image URL:', initialImageUrl);
      
      if (initialImageUrl && initialImageUrl !== '' && initialImageUrl !== 'data:,' && !initialImageUrl.includes('undefined')) {
        fabric.Image.fromURL(initialImageUrl, function(bgImg) {
          const canvasWidth = fabricCanvas.getWidth();
          const canvasHeight = fabricCanvas.getHeight();
          
          const scaleX = canvasWidth / bgImg.width;
          const scaleY = canvasHeight / bgImg.height;
          const bgScale = Math.min(scaleX, scaleY);
          
          bgImg.scale(bgScale);
          bgImg.set({
            left: (canvasWidth - bgImg.width * bgScale) / 2,
            top: (canvasHeight - bgImg.height * bgScale) / 2
          });
          
          fabricCanvas.setBackgroundImage(bgImg, function() {
            fabricCanvas.renderAll();
            console.log('Initial product image set as canvas background');
          }, {
            crossOrigin: 'anonymous'
          });
        }, { crossOrigin: 'anonymous' });
      } else {
        console.log('No valid initial image URL found, trying to get from product data');
        
        // Fallback: try to get image from product data
        const productData = window.productData || {};
        const currentVariant = productData.selected_or_first_available_variant;
        const variantImageMap = productData.variantImageMap || {};
        
        if (currentVariant && variantImageMap[currentVariant.id]) {
          const fallbackUrl = variantImageMap[currentVariant.id];
          console.log('Using fallback URL:', fallbackUrl);
          
          fabric.Image.fromURL(fallbackUrl, function(bgImg) {
            const canvasWidth = fabricCanvas.getWidth();
            const canvasHeight = fabricCanvas.getHeight();
            
            const scaleX = canvasWidth / bgImg.width;
            const scaleY = canvasHeight / bgImg.height;
            const bgScale = Math.min(scaleX, scaleY);
            
            bgImg.scale(bgScale);
            bgImg.set({
              left: (canvasWidth - bgImg.width * bgScale) / 2,
              top: (canvasHeight - bgImg.height * bgScale) / 2
            });
            
            fabricCanvas.setBackgroundImage(bgImg, function() {
              fabricCanvas.renderAll();
              console.log('Fallback product image set as canvas background');
            }, {
              crossOrigin: 'anonymous'
            });
          }, { crossOrigin: 'anonymous' });
        } else {
          console.log('No fallback image available');
          fabricCanvas.renderAll();
        }
      }
    }

    // Wait for image to load if needed
    if (imageElement.complete) {
      setInitialBackground();
    } else {
      imageElement.addEventListener('load', setInitialBackground);
      // Fallback timeout
      setTimeout(setInitialBackground, 1000);
    }
  }

  // Function to update the product image when variant changes
  function updateProductImage(variantId) {
    console.log('Updating product image for variant:', variantId);
    
    // Get the image URL from our variant image map
    const productData = window.productData || {};
    const variantImageMap = productData.variantImageMap || {};
    const imageUrl = variantImageMap[variantId];
    
    if (imageUrl) {
      console.log('Found image URL:', imageUrl);
      
      // Update the image source
      imageElement.src = imageUrl;
      imageElement.setAttribute('data-variant-id', variantId);
      
      // Update Fabric.js canvas background
      if (fabricCanvas) {
        fabric.Image.fromURL(imageUrl, function(img) {
          // Scale image to fit canvas
          const canvasWidth = fabricCanvas.getWidth();
          const canvasHeight = fabricCanvas.getHeight();
          
          const scaleX = canvasWidth / img.width;
          const scaleY = canvasHeight / img.height;
          const scale = Math.min(scaleX, scaleY);
          
          img.scale(scale);
          img.set({
            left: (canvasWidth - img.width * scale) / 2,
            top: (canvasHeight - img.height * scale) / 2,
            selectable: false,
            hasControls: false,
            hasBorders: false
          });
          
          // Set as background image instead of object
          fabricCanvas.setBackgroundImage(img, function() {
            fabricCanvas.renderAll();
            
            // Regenerate screenshot after background update if design exists
            if (uploadedDesign) {
              console.log('Regenerating screenshot after color change');
              setTimeout(() => {
                generateThumbnail();
              }, 200); // Small delay to ensure rendering is complete
            }
          }, {
            crossOrigin: 'anonymous'
          });
          
          console.log('Product image set as canvas background');
        }, { crossOrigin: 'anonymous' });
      }
      
      // Add a subtle fade effect
      canvasElement.style.opacity = '0.7';
      setTimeout(() => {
        canvasElement.style.opacity = '1';
      }, 150);
    } else {
      console.log('No image URL found for variant:', variantId);
    }
  }

  // Initialize canvas when Fabric.js is loaded
  if (typeof fabric !== 'undefined') {
    initFabricCanvas();
    setupFileUpload();
    setupVariantChangeListener();
    disableButtons(); // Start with buttons disabled
  } else {
    // Wait for Fabric.js to load
    const checkFabric = setInterval(() => {
      if (typeof fabric !== 'undefined') {
        clearInterval(checkFabric);
        initFabricCanvas();
        setupFileUpload();
        setupVariantChangeListener();
        disableButtons(); // Start with buttons disabled
      }
    }, 100);
  }

  // Setup file upload functionality
  function setupFileUpload() {
    const uploadButton = productMainImage.querySelector('.upload-design-button');
    const fileInput = productMainImage.querySelector('.design-upload-input');
    
    if (!uploadButton || !fileInput) return;

    // Handle upload button click - trigger the Shopify form file input
    uploadButton.addEventListener('click', function() {
      const shopifyFileInput = document.querySelector('input[name="properties[Uploaded Design]"]');
      if (shopifyFileInput) {
        shopifyFileInput.click();
      } else {
        // Fallback to local file input if Shopify input doesn't exist
        fileInput.click();
      }
    });

    // Listen for changes on the Shopify form file input
    const shopifyFileInput = document.querySelector('input[name="properties[Uploaded Design]"]');
    if (shopifyFileInput) {
      shopifyFileInput.addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
          handleFileUpload(file);
        }
      });
    }

    // Keep the local file input as fallback
    fileInput.addEventListener('change', function(e) {
      const file = e.target.files[0];
      if (file) {
        handleFileUpload(file);
      }
    });
  }

  // Setup variant change listener
  function setupVariantChangeListener() {
    // Listen for variant changes using MutationObserver
    const variantInput = document.querySelector('input[name="id"]');
    if (variantInput) {
      const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
          if (mutation.type === 'attributes' && mutation.attributeName === 'value') {
            const newVariantId = variantInput.value;
            console.log('Variant changed to:', newVariantId);
            
            // Update product image with new variant
            updateProductImage(newVariantId);
          }
        });
      });
      
      observer.observe(variantInput, {
        attributes: true,
        attributeFilter: ['value']
      });
      
      console.log('Variant change listener set up');
    } else {
      console.log('Variant input not found, trying alternative method');
      
      // Alternative: Listen for custom variant change events
      document.addEventListener('variant:update', function(event) {
        if (event.detail && event.detail.variant) {
          console.log('Variant update event received:', event.detail.variant);
          updateProductImage(event.detail.variant.id);
        }
      });
    }
  }

  // Disable Add to Cart and Buy Now buttons
  function disableButtons() {
    // Disable Add to Cart button
    const addToCartButton = document.querySelector('button[name="add"]');
    if (addToCartButton) {
      addToCartButton.disabled = true;
      addToCartButton.style.opacity = '0.5';
      addToCartButton.style.cursor = 'not-allowed';
      addToCartButton.title = 'Please upload a design first';
    }
    
    // Disable Buy Now (Fast Track) button
    const buyNowButton = document.querySelector('.custom-buy-now-button');
    if (buyNowButton) {
      buyNowButton.disabled = true;
      buyNowButton.style.opacity = '0.5';
      buyNowButton.style.cursor = 'not-allowed';
      buyNowButton.title = 'Please upload a design first';
    }
    
    console.log('Buttons disabled - no design uploaded');
  }

  // Enable Add to Cart and Buy Now buttons
  function enableButtons() {
    // Enable Add to Cart button
    const addToCartButton = document.querySelector('button[name="add"]');
    if (addToCartButton) {
      addToCartButton.disabled = false;
      addToCartButton.style.opacity = '1';
      addToCartButton.style.cursor = 'pointer';
      addToCartButton.title = '';
    }
    
    // Enable Buy Now (Fast Track) button
    const buyNowButton = document.querySelector('.custom-buy-now-button');
    if (buyNowButton) {
      buyNowButton.disabled = false;
      buyNowButton.style.opacity = '1';
      buyNowButton.style.cursor = 'pointer';
      buyNowButton.title = '';
    }
    
    console.log('Buttons enabled - design uploaded');
  }

  // Custom Buy Now function that adds to cart first, then redirects to checkout
  window.handleCustomBuyNow = function() {
    // Find the main product form
    const productForm = document.querySelector('form[data-type="add-to-cart-form"]');
    if (!productForm) {
      console.error('Product form not found');
      return;
    }

    // Check if we have a design uploaded in the Shopify form
    const shopifyFileInput = document.querySelector('input[name="properties[Uploaded Design]"]');
    if (shopifyFileInput && shopifyFileInput.files.length > 0) {
      // Generate screenshot if not already generated
      if (!window.designThumbnailFile) {
        generateThumbnail();
      }
      
      // Create a temporary form data with the file
      const formData = new FormData(productForm);
      
      // Add screenshot to form data if available
      if (window.designThumbnailFile) {
        formData.append('properties[Download Mockup]', window.designThumbnailFile);
        console.log('Design screenshot added to Buy Now cart:', window.designThumbnailFile.name, 'Size:', window.designThumbnailFile.size, 'bytes');
      }
      
      // Add to cart via AJAX
      fetch('/cart/add.js', {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        if (data.status) {
          alert('Error adding to cart: ' + data.message);
        } else {
          // Successfully added to cart, redirect to checkout
          window.location.href = '/checkout';
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('Error adding to cart. Please try again.');
      });
    } else {
      // No file uploaded, just redirect to checkout
      window.location.href = '/checkout';
    }
  };

  // Handle uploaded file
  function handleFileUpload(file) {
    // Validate file type
    if (!file.type.startsWith('image/')) {
      alert('Please select an image file.');
      return;
    }

    // Validate file size (max 5MB)
    if (file.size > 5 * 1024 * 1024) {
      alert('File size must be less than 5MB.');
      return;
    }

    // Store the file globally for cart submission
    window.uploadedDesignFile = file;
    
    // Enable buttons when design is uploaded
    enableButtons();

    const reader = new FileReader();
    reader.onload = function(e) {
      const imageUrl = e.target.result;
      
      // Remove Euro Hoodie logo if it exists
      if (euroHoodieLogo) {
        fabricCanvas.remove(euroHoodieLogo);
        euroHoodieLogo = null;
      }

      // Remove uploaded design if it exists
      if (uploadedDesign) {
        fabricCanvas.remove(uploadedDesign);
      }

      // Load and add the uploaded design
      fabric.Image.fromURL(imageUrl, function(img) {
        uploadedDesign = img;
        
        // Scale and position the uploaded design
        const canvasWidth = fabricCanvas.getWidth();
        const canvasHeight = fabricCanvas.getHeight();
        
        // Scale design to fit nicely on the product (similar to logo)
        const scale = Math.min(canvasWidth * 0.4 / img.width, canvasHeight * 0.4 / img.height);
        img.scale(scale);
        
        // Center the design
        img.set({
          left: (canvasWidth - img.width * scale) / 2,
          top: (canvasHeight - img.height * scale) / 2,
          centeredScaling: true, // Scale from center
          selectable: true,
          hasControls: true,
          hasBorders: true,
          cornerSize: isMobile ? 15 : 10, // Larger corners on mobile
          transparentCorners: false,
          cornerColor: '#0A84FF',
          borderColor: '#0A84FF',
          cornerStrokeColor: '#fff',
          cornerStyle: 'circle'
        });

        // Only show corners, rotate, and custom X handle
        img.setControlsVisibility({
          tl: true, // top-left
          tr: true, // top-right
          bl: true, // bottom-left
          br: true, // bottom-right
          mt: false, // middle top
          mb: false, // middle bottom
          ml: false, // middle left
          mr: false, // middle right
          mtr: true, // rotation
          removeX: true // custom X handle
        });

        // Add custom X removal handle at 6 o'clock
        img.controls = img.controls || { ...fabric.Object.prototype.controls };
        img.controls.removeX = new fabric.Control({
          x: 0,
          y: 0.5,
          offsetY: isMobile ? 40 : 28, // Larger offset on mobile
          sizeX: isMobile ? 60 : 25, // Bigger hit area width
          sizeY: isMobile ? 60 : 25, // Bigger hit area height
          cursorStyle: 'pointer',
          mouseUpHandler: function(eventData, transform) {
            removeDesign();
            return true;
          },
          render: function(ctx, left, top, styleOverride, fabricObject) {
            ctx.save();
            ctx.beginPath();
            const radius = isMobile ? 20 : 16; // Larger button on mobile

            // Updates thumbnail on the mockup changes
            if (fabricCanvas && uploadedDesign) {
              const schedule = () => generateThumbnailDebounced();
              uploadedDesign.on('modified', schedule);
              uploadedDesign.on('scaled', schedule);
              uploadedDesign.on('rotating', schedule);
              uploadedDesign.on('skewing', schedule);
              uploadedDesign.on('moving', schedule);
              fabricCanvas.on('mouse:up', schedule);
              fabricCanvas.on('selection:updated', schedule);
              fabricCanvas.on('selection:created', schedule);
            }

            ctx.arc(left, top, radius, 0, 2 * Math.PI, false);
            ctx.fillStyle = '#0A84FF'; // Blue color
            ctx.fill();
            ctx.font = isMobile ? 'bold 22px Arial' : 'bold 18px Arial'; // Larger font on mobile
            ctx.fillStyle = '#fff';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillText('âœ•', left, top+1);
            ctx.restore();
          }
        });
        
        fabricCanvas.add(img);
        // Make handles visible immediately
        fabricCanvas.setActiveObject(img);
        fabricCanvas.renderAll();
        
        // Hide the upload button
        const uploadButton = productMainImage.querySelector('.upload-design-button');
        if (uploadButton) {
          uploadButton.classList.add('hidden');
        }
        
        console.log('Uploaded design loaded and positioned on canvas');
        
        // Generate thumbnail for cart
        generateThumbnail();
      });
    };
    
    reader.readAsDataURL(file);
  }

  // Generate compressed thumbnail for cart
  function generateThumbnail() {
    if (!fabricCanvas) return;
    
    // Temporarily hide all handles and controls
    const activeObject = fabricCanvas.getActiveObject();
    if (activeObject) {
      activeObject.hasControls = false;
      activeObject.hasBorders = false;
    }
    
    // Render canvas without handles
    fabricCanvas.renderAll();
    
    // Create a temporary canvas for thumbnail
    const thumbnailCanvas = document.createElement('canvas');
    const thumbnailWidth = 400;
    const thumbnailHeight = 300;
    
    thumbnailCanvas.width = thumbnailWidth;
    thumbnailCanvas.height = thumbnailHeight;
    
    const ctx = thumbnailCanvas.getContext('2d');

    // Resolves issue with thumbnail image not being full
    const srcCanvas = fabricCanvas.getElement(),
      srcW = srcCanvas.width,
      srcH = srcCanvas.height,
      scale = Math.min(thumbnailWidth / srcW, thumbnailHeight / srcH),
      drawW = Math.floor(srcW * scale),
      drawH = Math.floor(srcH * scale),
      offsetX = Math.floor((thumbnailWidth - drawW) / 2),
      offsetY = Math.floor((thumbnailHeight - drawH) / 2);

    ctx.clearRect(0, 0, thumbnailWidth, thumbnailHeight);
    ctx.drawImage(srcCanvas, 0, 0, srcW, srcH, offsetX, offsetY, drawW, drawH);

    // Restore handles and controls
    if (activeObject) {
      activeObject.hasControls = true;
      activeObject.hasBorders = true;
    }
    fabricCanvas.renderAll();
    
    // Convert to blob and then to file
    thumbnailCanvas.toBlob(function(blob) {
      const thumbnailFile = new File([blob], 'design-thumbnail.png', { type: 'image/png' });
      window.designThumbnailFile = thumbnailFile;
      console.log('Thumbnail file created:', thumbnailFile.name, 'Size:', thumbnailFile.size, 'bytes');
    }, 'image/png');
  }

  // Add X button to remove design
  function addRemoveButton(designObject) {
    // Create X button text
    const xButton = new fabric.Text('âœ•', {
      fontSize: isMobile ? 24 : 20, // Larger font on mobile
      fill: '#ff0000',
      backgroundColor: 'rgba(255, 255, 255, 0.9)',
      padding: isMobile ? 12 : 8, // Larger padding on mobile
      borderRadius: 50,
      selectable: false,
      hasControls: false,
      hasBorders: false,
      originX: 'center',
      originY: 'center'
    });

    // Position X button at top-right corner of design
    xButton.set({
      left: designObject.left + designObject.width * designObject.scaleX - (isMobile ? 20 : 15),
      top: designObject.top - (isMobile ? 20 : 15)
    });

    // Add click event to X button
    xButton.on('mousedown', function() {
      removeDesign();
    });

    fabricCanvas.add(xButton);
    
    // Store reference to X button
    designObject.xButton = xButton;
  }

  // Remove design and show upload button
  function removeDesign() {
    if (uploadedDesign) {
      fabricCanvas.remove(uploadedDesign);
      if (uploadedDesign.xButton) {
        fabricCanvas.remove(uploadedDesign.xButton);
      }
      uploadedDesign = null;
    }
    
    // Show the upload button again
    const uploadButton = productMainImage.querySelector('.upload-design-button');
    if (uploadButton) {
      uploadButton.classList.remove('hidden');
    }
    
    // Disable buttons when design is removed
    disableButtons();
    
    fabricCanvas.renderAll();
    console.log('Design removed, upload button restored');
  }

  // Handle window resize for responsive canvas
  window.addEventListener('resize', function() {
    const wasMobile = isMobile;
    isMobile = window.innerWidth < 750;
    
    // Only reinitialize if mobile state changed or significant resize
    if (wasMobile !== isMobile || Math.abs(window.innerWidth - fabricCanvas.getWidth()) > 50) {
      console.log('Window resized, reinitializing canvas');
      setTimeout(() => {
        initFabricCanvas();
        // Restore uploaded design if it exists
        if (uploadedDesign) {
          handleFileUpload(window.uploadedDesignFile);
        }
      }, 100);
    }
  });

  // Listen for variant changes
  document.addEventListener('variant:update', function(event) {
    if (event.detail && event.detail.variant) {
      updateProductImage(event.detail.variant.id);
    }
  });

  // Also listen for form changes (fallback)
  const variantInputs = document.querySelectorAll('input[name="id"], select[name="id"]');
  variantInputs.forEach(input => {
    input.addEventListener('change', function() {
      const variantId = parseInt(this.value);
      if (variantId) {
        updateProductImage(variantId);
      }
    });
  });

  // Listen for radio button changes (color swatches)
  const variantRadios = document.querySelectorAll('input[type="radio"][data-variant-id]');
  variantRadios.forEach(radio => {
    radio.addEventListener('change', function() {
      if (this.checked) {
        const variantId = parseInt(this.getAttribute('data-variant-id'));
        if (variantId) {
          updateProductImage(variantId);
        }
      }
    });
  });

  // Listen for mutation observer changes (for dynamic variant updates)
  const observer = new MutationObserver(function(mutations) {
    mutations.forEach(function(mutation) {
      if (mutation.type === 'attributes' && mutation.attributeName === 'value') {
        const target = mutation.target;
        if (target.name === 'id' && target.value) {
          const variantId = parseInt(target.value);
          if (variantId) {
            updateProductImage(variantId);
          }
        }
      }
    });
  });

  // Observe variant input changes
  variantInputs.forEach(input => {
    observer.observe(input, { attributes: true });
  });
});
</script>

{% stylesheet %}
  .product-main-image-block {
    width: 100%;
    margin: 2rem 0;
  }

  .product-main-image-container {
    position: relative;
    width: 100%;
    max-width: 600px;
    margin: 0 auto;
    border-radius: {{ block.settings.border_radius | default: 8 }}px;
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .product-main-canvas {
    width: 100%;
    height: auto;
    display: block;
    transition: opacity 0.3s ease;
    border-radius: {{ block.settings.border_radius | default: 8 }}px;
    cursor: crosshair;
    background: transparent !important;
  }

  /* Ensure Fabric.js canvas elements are transparent */
  .product-main-canvas canvas {
    background: transparent !important;
  }

  /* Upload Design Button */
  .upload-design-button {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 10;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .upload-design-button:hover {
    transform: translate(-50%, -50%) scale(1.05);
  }

  .upload-design-circle {
    width: 240px;
    height: 240px;
    border-radius: 50%;
    background: rgba(10, 132, 255, 0.1);
    backdrop-filter: blur(4px);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    color: white;
    text-align: center;
    border: 2px solid rgba(10, 132, 255, 0.5);
    transition: all 0.3s ease;
  }

  .upload-design-button:hover .upload-design-circle {
    background: rgba(10, 132, 255, 0.2);
    border: 2px solid rgba(10, 132, 255, 0.7);
  }

  .upload-design-icon {
    font-size: 3rem;
    margin-bottom: 12px;
  }

  .upload-design-text {
    font-size: 1.1rem;
    font-weight: 500;
    line-height: 1.2;
    max-width: 160px;
    color: #8ac2ff;
  }

  /* Hide upload button when design is uploaded */
  .upload-design-button.hidden {
    display: none;
  }

  .product-main-image {
    width: 100%;
    height: auto;
    display: block;
    transition: opacity 0.3s ease;
    border-radius: {{ block.settings.border_radius | default: 8 }}px;
  }

  .product-main-image--placeholder {
    background: #f8f9fa;
    border: 2px dashed #dee2e6;
    min-height: 300px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .product-main-image-placeholder {
    text-align: center;
    color: #6c757d;
    font-size: 1.1rem;
  }

  .product-main-image-placeholder span {
    display: block;
    margin-top: 0.5rem;
  }

  /* Responsive adjustments */
  @media screen and (max-width: 749px) {
    .product-main-image-container {
      max-width: 100%;
      margin: 1rem 0;
    }
    
    .product-main-image--placeholder {
      min-height: 200px;
    }

    /* Mobile-specific upload button */
    .upload-design-circle {
      width: 180px;
      height: 180px;
    }

    .upload-design-icon {
      font-size: 2.5rem;
      margin-bottom: 8px;
    }

    .upload-design-text {
      font-size: 1rem;
      max-width: 120px;
    }

    /* Improve touch targets */
    .product-main-canvas {
      cursor: pointer;
    }

    /* Larger touch areas for Fabric.js controls */
    .product-main-canvas .canvas-container {
      touch-action: manipulation;
    }
  }

  /* Extra small mobile devices */
  @media screen and (max-width: 480px) {
    .upload-design-circle {
      width: 150px;
      height: 150px;
    }

    .upload-design-icon {
      font-size: 2rem;
      margin-bottom: 6px;
    }

    .upload-design-text {
      font-size: 0.9rem;
      max-width: 100px;
    }
  }

  /* Loading state */
  .product-main-image--loading {
    opacity: 0.7;
  }

  /* Touch-friendly improvements */
  @media (hover: none) and (pointer: coarse) {
    .upload-design-button:hover {
      transform: translate(-50%, -50%) scale(1);
    }
    
    .upload-design-button:hover .upload-design-circle {
      background: rgba(0, 0, 0, 0.3);
      border-color: rgba(255, 255, 255, 0.2);
    }
  }
{% endstylesheet %}

{% schema %}
{
  "name": "Product Main Image",
  "tag": "div",
  "settings": [
    {
      "type": "header",
      "content": "Image Settings"
    },
    {
      "type": "range",
      "id": "border_radius",
      "label": "Border Radius",
      "min": 0,
      "max": 32,
      "step": 1,
      "unit": "px",
      "default": 8
    },
    {
      "type": "paragraph",
      "content": "This block automatically shows the product's main image and updates when variant colors are changed."
    }
  ]
}
{% endschema %} 