<script src="https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/4.4.0/fabric.min.js"></script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const mockup = document.querySelector(".canvas-wrapper");
    let productData = {{ closest.product | json }};
    const deleteIcon = new Image();
    deleteIcon.src = 'data:image/svg+xml;utf8,' + encodeURIComponent(`
      <svg width="60" height="60" viewBox="0 0 60 60" xmlns="http://www.w3.org/2000/svg">
        <defs>
          <mask id="mask-x">
            <rect width="60" height="60" fill="white"/>
            <line x1="15" y1="15" x2="45" y2="45" stroke="black" stroke-width="6"/>
            <line x1="45" y1="15" x2="15" y2="45" stroke="black" stroke-width="6"/>
          </mask>
        </defs>
        <circle cx="30" cy="30" r="30" fill="#b2ccff" mask="url(#mask-x)"/>
      </svg>
    `);

        function initCanvas() {
      const canvasElement = document.getElementById("canvas");
      const canvas = new fabric.Canvas("canvas");
      fabric.Object.prototype.setControlsVisibility({ mt: false, mb: false, ml: false, mr: false });
      fabric.Object.prototype.cornerSize = 30;
      fabric.Object.prototype.cornerStyle = 'circle';
      canvas.setWidth(700);
      canvas.setHeight(700);
      canvasElement.style.width = '100%';
      canvasElement.style.height = '100%';

      fabric.Image.fromURL('{{ closest.product.selected_or_first_available_variant.featured_image | image_url: width: 700 }}', function (img) {
        img.scaleToWidth(700);
        canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas));
      });

      let uploadedImage;
      document.getElementById('upload-input')?.addEventListener('change', function (e) {
        const label = document.querySelector('label#message');
        if (!label) return;
        const file = e.target.files[0];
        if (!file) {
          if (uploadedImage) {
            canvas.remove(uploadedImage);
            canvas.renderAll();
            uploadedImage = null;
          }
          label.innerHTML = `Minimum recommended size: 1000 × 1000px`;
          return;
        }
        const reader = new FileReader();
        reader.onload = function (event) {
          const img = new Image();
          img.onload = function () {
            const width = img.naturalWidth;
            const height = img.naturalHeight;
            const isValid = width >= 1000 && height >= 1000;
            label.innerHTML = `Uploaded size: <span style=\"color:${isValid ? 'green' : 'red'}\">${width} × ${height}px</span>`;
            fabric.Image.fromURL(event.target.result, function (fabricImg) {
              if (uploadedImage) canvas.remove(uploadedImage);
              const maxWidth = canvas.getWidth() * 0.5;
              const maxHeight = canvas.getHeight() * 0.5;
              if (fabricImg.width > maxWidth || fabricImg.height > maxHeight) fabricImg.scaleToWidth(maxWidth);
              fabricImg.set({
                left: (canvas.getWidth() - fabricImg.getScaledWidth()) / 2,
                top: (canvas.getHeight() - fabricImg.getScaledHeight()) / 2,
                hasBorders: true,
                hasControls: true,
                hasRotatingPoint: true
              });
              canvas.add(fabricImg);
              canvas.renderAll();
              uploadedImage = fabricImg;
            });
          };
          img.src = event.target.result;
        };
        reader.readAsDataURL(file);
      });

      document.addEventListener('variant:update', function () {
        const selectedVariantId = document.querySelector('[name="id"]')?.value;
        const selectedVariant = productData.variants.find(v => v.id == selectedVariantId);
        if (selectedVariant?.featured_image?.src) {
          fabric.Image.fromURL(selectedVariant.featured_image.src, function (img) {
            img.scaleToWidth(700);
            canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas));
          });
        }
      });

      const isMobile = window.innerWidth <= 1200;
      fabric.Object.prototype.controls.deleteControl = new fabric.Control({
        x: 0,
        y: 0.5,
        offsetY: isMobile ? 40 : 22,
        offsetX: 0,
        cursorStyle: 'pointer',
        cornerSize: isMobile ? 66 : 33,
        mouseUpHandler: function (_, transform) {
          const target = transform.target;
          const canvas = target.canvas;
          canvas.remove(target);
          canvas.requestRenderAll();
          const label = document.querySelector('label#message');
          if (label) label.innerHTML = `Minimum recommended size: 1000 × 1000px`;
          const uploadInput = document.getElementById('upload-input');
          if (uploadInput) uploadInput.value = '';
        },
        render: function (ctx, left, top, _, fabricObject) {
          const size = this.cornerSize;
          if (deleteIcon.complete) {
            ctx.save();
            ctx.beginPath();
            ctx.arc(left, top, size / 2, 0, 2 * Math.PI);
            ctx.clip();
            ctx.drawImage(deleteIcon, left - size / 2, top - size / 2, size, size);
            ctx.restore();
          } else {
            deleteIcon.onload = function () {
              fabricObject.canvas.requestRenderAll();
            };
          }
        }
      });

      return canvas;
    }

    function rebindEvents(canvas) {
      document.body.addEventListener('click', function (e) {
        const button = e.target.closest('button[name="add"]');
        if (!button) return;
        console.log('[PPT DEBUG] Add to cart button clicked');
        const designInput = document.getElementById('upload-input');
        if (!designInput.files.length) {
          e.preventDefault();
          alert('Please upload a design and wait for the mockup screenshot before adding to cart.');
          return;
        }
        e.preventDefault();
        const form = button.closest('form');
        const mockup = document.querySelector('.canvas-wrapper');
        if (!mockup || !form) {
          console.log('[PPT DEBUG] Mockup or form not found', { mockup, form });
          return;
        }
        canvas.getObjects().forEach(obj => { obj.hasControls = false });
        canvas.renderAll();
        html2canvas(mockup, { useCORS: true, scale: 2 }).then(canvasScreenshot => {
          canvas.getObjects().forEach(obj => { obj.hasControls = true });
          canvas.renderAll();
          // Crop the screenshot to a square using the left side as base
          const origWidth = canvasScreenshot.width;
          const origHeight = canvasScreenshot.height;
          const size = origHeight; // Use height as the square size
          const sx = 0; // Always start from the left
          const sy = 0; // Always start from the top
          // Create a 250x250 canvas for upload
          const targetSize = 250;
          const squareCanvas = document.createElement('canvas');
          squareCanvas.width = targetSize;
          squareCanvas.height = targetSize;
          const ctx = squareCanvas.getContext('2d');
          ctx.drawImage(canvasScreenshot, sx, sy, size, size, 0, 0, targetSize, targetSize);
          // Generate a unique 8-char hash for the filename
          function getShortHash() {
            const str = Date.now().toString() + Math.random().toString();
            return btoa(str).replace(/[^a-zA-Z0-9]/g, '').substring(0, 8);
          }
          const mockupScreenshotName = 'mockup-screenshot-' + getShortHash() + '.png';
          squareCanvas.toBlob(function(blob) {
            const formDataUpload = new FormData();
            formDataUpload.append('file', blob, mockupScreenshotName);
            fetch('https://artshop.lv/uploads/upload.php', {
              method: 'POST',
              body: formDataUpload
            })
            .then(res => res.json())
            .then(data => {
              if (data.url) {
                // Always use /uploads/uploads/ instead of /uploads/ in the returned URL
                let fixedUrl = data.url.replace('/uploads/', '/uploads/uploads/');
                let hiddenInput = document.getElementById('mockup-screenshot-url');
                if (!hiddenInput) {
                  hiddenInput = document.createElement('input');
                  hiddenInput.type = 'hidden';
                  hiddenInput.name = 'properties[Mockup Screenshot URL]';
                  hiddenInput.id = 'mockup-screenshot-url';
                  form.appendChild(hiddenInput);
                }
                hiddenInput.value = fixedUrl;
                console.log('[PPT DEBUG] Uploaded screenshot URL:', fixedUrl);
                submitViaAjax(form);
              } else {
                alert('Screenshot upload failed. Please try again.');
              }
            })
            .catch(() => {
              alert('Screenshot upload failed. Please try again.');
            });
          }, 'image/png');
        });
      });

      function submitViaAjax(form) {
        const submitButton = form.querySelector('[name="add"]');
        const spinner = submitButton.querySelector('.loading__spinner');
        const originalText = submitButton.querySelector('span');
        submitButton.disabled = true;
        submitButton.classList.add('loading');
        if (spinner) spinner.classList.remove('hidden');
        if (originalText) originalText.textContent = 'Adding...';
        const formData = new FormData(form);
        console.log('[PPT DEBUG] Sending AJAX request to /cart/add.js');
        fetch('/cart/add.js', {
          method: 'POST',
          body: formData,
          headers: { 'Accept': 'application/json' }
        }).then(response => {
          console.log('[PPT DEBUG] /cart/add.js response', response);
          return response.json();
        }).then(data => {
          console.log('[PPT DEBUG] /cart/add.js response data', data);
          fetch(`/cart?sections=cart-products,cart-bubble&key=${data.key}`).then(res => res.json()).then(sectionData => {
            console.log('[PPT DEBUG] Cart sections response', sectionData);
            const cartDrawer = document.querySelector('cart-drawer-component');
            if (cartDrawer && typeof cartDrawer.renderContents === 'function') {
              cartDrawer.renderContents({ key: data.key, sections: sectionData });
            } else {
              // Fallback: reload the page to update the cart
              window.location.reload();
            }
            submitButton.disabled = false;
            submitButton.classList.remove('loading');
            if (spinner) spinner.classList.add('hidden');
            if (originalText) originalText.textContent = 'Add to cart';
          });
        }).catch((err) => {
          console.log('[PPT DEBUG] Error in add to cart AJAX', err);
          submitButton.disabled = false;
          submitButton.classList.remove('loading');
          if (spinner) spinner.classList.add('hidden');
          if (originalText) originalText.textContent = 'Add to cart';
        });
      }
    }

    const canvas = initCanvas();
    rebindEvents(canvas);
  });
</script> 